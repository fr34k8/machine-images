{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "MongoDB OpsManager Server",
  "Parameters": {
    "KeyName": {
      "Description": "The EC2 Key Pair to allow SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "Stage": {
      "Description": "Environment name",
      "Type": "String",
      "AllowedValues": [
        "CODE",
        "QA",
        "RELEASE",
        "PROD"
      ]
    },
    "VpcId": {
      "Description": "ID of the VPC onto which to launch the application eg. vpc-1234abcd",
      "Type": "AWS::EC2::VPC::Id"
    },
    "SSHAccessCIDR": {
      "Description": "IP address range allowed to SSH to the OpsManager instances",
      "Type": "String",
      "Default": "10.249.0.0/16"
    },
    "BackupLoadBalancerSecurityGroups": {
      "Type": "List<AWS::EC2::SecurityGroup::GroupName>",
      "Description": "Security groups allowed access the backup API"
    },
    "PrivateVpcSubnets": {
      "Description": "Subnets to use in VPC for private EC2 instances eg. subnet-abcd1234",
      "Type": "List<AWS::EC2::Subnet::Id>"
    },
    "MachineImagesAMI": {
      "Description": "AMI id from the machine-images repo",
      "Type": "String"
    },
    "IOPS": {
      "Description": "IOPS to provision",
      "Type": "Number",
      "Default": "500"
    },
    "EBSVolumeSize": {
      "Description": "Size of EBS volume",
      "Type": "Number",
      "Default": "200"
    },
    "Size": {
      "Description": "Size of ASG",
      "Type": "Number",
      "Default": "3"
    },
    "CustomerMasterKey": {
      "Description": "The KMS CMK to use to encrypt the EBS volumes",
      "Type": "String"
    },
    "SSLCertificateArn": {
      "Description": "ARN of the SSL certificate for *.gutools.co.uk",
      "Type": "String",
      "Default": "arn:aws:iam::743583969668:server-certificate/sites.gutools.co.uk-exp2015-10-20"
    },
    "PagerDutyEndPoint": {
      "Description": "PagerDuty HTTPS end-point to use for alerting",
      "Type": "String",
      "AllowedPattern": "https:\/\/.*"
    }
  },
  "Mappings": {
    "OpsManagerVPCSubnets" : {
      "Private1A": {
        "CIDR": "10.248.53.0/26"
      },
      "Private1B": {
        "CIDR": "10.248.53.64/26"
      },
      "Private1C": {
        "CIDR": "10.248.53.128/26"
      }
    },
    "GNMNetworks": {
      "Office": {
        "CIDR": "10.249.0.0/16"
      }
    }
  },
  "Resources": {
    "ServerInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "ServerRole"
          }
        ]
      }
    },
    "ServerRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "DescribeEC2Policy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "DescribeEC2Policy",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "EC2:Describe*",
                "elasticloadbalancing:Describe*"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "cloudformation:DescribeStacks"
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "AWS::StackId"
              }
            }
          ]
        },
        "Roles": [
          {
            "Ref": "ServerRole"
          }
        ]
      }
    },
    "CreateEncryptedVolumePolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "CreateEncryptedVolumePolicy",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2:CreateVolume",
                "ec2:AttachVolume",
                "ec2:CreateTags",
                "ec2:DescribeTags",
                "ec2:DescribeVolumes",
                "ec2:ModifyInstanceAttribute"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "kms:CreateGrant",
                "kms:GenerateDataKeyWithoutPlaintext",
                "kms:Decrypt"
              ],
              "Effect": "Allow",
              "Resource": { "Ref": "CustomerMasterKey"}
            }
          ]
        },
        "Roles": [{"Ref": "ServerRole"}]
      }
    },
    "LockTablePolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "LockTable",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:DescribeTable",
                "dynamodb:CreateTable",
                "dynamodb:PutItem",
                "dynamodb:GetItem",
                "dynamodb:UpdateItem"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:dynamodb:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":table/mongo-initialisation"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:dynamodb:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":table/mongo.ops-manager-config.flexible-opsmanager-",
                      {
                        "Ref": "Stage"
                      }
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "ServerRole"
          }
        ]
      }
    },

    "TopicPagerDutyAlerts": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": "OpsManagerPagerDutyAlerts",
        "Subscription": [
          {
            "Endpoint": {"Ref": "PagerDutyEndPoint"},
            "Protocol": "https"
          }
        ]
      }
    },

    "SSHSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow SSH access from the office",
        "VpcId": {
          "Ref": "VpcId"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": { "Ref": "SSHAccessCIDR" }
          }
        ]
      }
    },
    "ReplicationSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow connections to mongo DBs",
        "VpcId": {
          "Ref": "VpcId"
        }
      }
    },
    "ReplicationSecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "ReplicationSecurityGroup" },
        "IpProtocol": "tcp",
        "FromPort": "27017",
        "ToPort": "27018",
        "SourceSecurityGroupId": { "Ref": "ReplicationSecurityGroup" }
      }
    },
    "ServerLoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow access to app from ELBs",
        "VpcId": { "Ref": "VpcId" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "SourceSecurityGroupId": { "Ref": "MMSLoadBalancerSecurityGroup" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8081",
            "CidrIp": { "Fn::FindInMap": [ "OpsManagerVPCSubnets", "Private1A", "CIDR" ] }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8081",
            "CidrIp": { "Fn::FindInMap": [ "OpsManagerVPCSubnets", "Private1B", "CIDR" ] }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8081",
            "CidrIp": { "Fn::FindInMap": [ "OpsManagerVPCSubnets", "Private1C", "CIDR" ] }
          }
        ]
      }
    },

    "MMSLoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": { "Ref": "VpcId" },
        "GroupDescription": "Allow access to OpsManager on private ELB ",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": { "Fn::FindInMap": [ "GNMNetworks", "Office", "CIDR" ] }
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "CidrIp": { "Fn::FindInMap": [ "OpsManagerVPCSubnets", "Private1A", "CIDR" ] }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "CidrIp": { "Fn::FindInMap": [ "OpsManagerVPCSubnets", "Private1B", "CIDR" ] }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "CidrIp": { "Fn::FindInMap": [ "OpsManagerVPCSubnets", "Private1C", "CIDR" ] }
          }
        ]
      }
    },
    "MMSLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Scheme": "internal",
        "CrossZone": true,
        "Listeners": [
          {
            "Protocol": "HTTPS",
            "LoadBalancerPort": "443",
            "InstancePort": "8080",
            "SSLCertificateId": { "Ref": "SSLCertificateArn" }
          }
        ],
        "HealthCheck": {
          "Target": "HTTP:8080/user/login",
          "Timeout": "5",
          "Interval": "10",
          "UnhealthyThreshold": "5",
          "HealthyThreshold": "2"
        },
        "Subnets": { "Ref": "PrivateVpcSubnets" },
        "SecurityGroups": [
          { "Ref": "MMSLoadBalancerSecurityGroup" }
        ]
      }
    },
    "InsufficientHealthyHostsAlarmMMS": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ActionsEnabled": "true",
        "AlarmDescription": "There are insufficient healthy hosts for OpsManager MMS",
        "ComparisonOperator": "LessThanThreshold",
        "EvaluationPeriods": "1",
        "MetricName": "HealthyHostCount",
        "Namespace": "AWS/ELB",
        "Period": "60",
        "Statistic": "Average",
        "Threshold": {"Ref":"Size"},
        "AlarmActions": [
          { "Ref": "TopicPagerDutyAlerts" }
        ],
        "InsufficientDataActions": [
          { "Ref": "TopicPagerDutyAlerts" }
        ],
        "OKActions": [
          { "Ref": "TopicPagerDutyAlerts" }
        ],
        "Dimensions": [ { "Name": "LoadBalancerName", "Value": { "Ref": "MMSLoadBalancer" } } ]
      }
  },
    "BackupLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Scheme": "internal",
        "CrossZone": true,
        "Listeners": [
          {
            "Protocol": "HTTP",
            "LoadBalancerPort": "8081",
            "InstancePort": "8081"
          }
        ],
        "HealthCheck": {
          "Target": "HTTP:8080/user/login",
          "Timeout": "10",
          "Interval": "20",
          "UnhealthyThreshold": "10",
          "HealthyThreshold": "2"
        },
        "Subnets": { "Ref": "PrivateVpcSubnets" },
        "SecurityGroups": { "Ref": "BackupLoadBalancerSecurityGroups" }
      }
    },
    "InsufficientHealthyHostsAlarmBackup": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ActionsEnabled": "true",
        "AlarmDescription": "There are insufficient healthy hosts for OpsManager Backup HTTP server",
        "ComparisonOperator": "LessThanThreshold",
        "EvaluationPeriods": "1",
        "MetricName": "HealthyHostCount",
        "Namespace": "AWS/ELB",
        "Period": "60",
        "Statistic": "Average",
        "Threshold": {"Ref":"Size"},
        "AlarmActions": [
          { "Ref": "TopicPagerDutyAlerts" }
        ],
        "InsufficientDataActions": [
          { "Ref": "TopicPagerDutyAlerts" }
        ],
        "OKActions": [
          { "Ref": "TopicPagerDutyAlerts" }
        ],
        "Dimensions": [ { "Name": "LoadBalancerName", "Value": { "Ref": "BackupLoadBalancer" } } ]
      }
    },

    "AutoscalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": {
          "Ref": "PrivateVpcSubnets"
        },
        "LaunchConfigurationName": {
          "Ref": "LaunchConfig"
        },
        "MinSize": 1,
        "MaxSize": {
          "Ref": "Size"
        },
        "DesiredCapacity": {
          "Ref": "Size"
        },
        "Cooldown": "180",
        "HealthCheckType": "EC2",
        "HealthCheckGracePeriod": 1800,
        "LoadBalancerNames": [ { "Ref": "MMSLoadBalancer" }, { "Ref": "BackupLoadBalancer" } ],
        "Tags": [
          {
            "Key": "Stage",
            "Value": {
              "Ref": "Stage"
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Stack",
            "Value": "flexible",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "App",
            "Value": "opsmanager",
            "PropagateAtLaunch": "true"
          }
        ]
      }
    },
    "LaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Ref": "MachineImagesAMI"
        },
        "SecurityGroups": [
          { "Ref": "SSHSecurityGroup" },
          { "Ref": "ReplicationSecurityGroup" },
          { "Ref": "ServerLoadBalancerSecurityGroup"}
        ],
        "InstanceType": "r3.xlarge",
        "IamInstanceProfile": {
          "Ref": "ServerInstanceProfile"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "#!/bin/bash -ev",
                { "Fn::Join": [ "", ["/opt/features/ebs/add-encrypted.sh -s ", { "Ref": "EBSVolumeSize" }, " -d f -m /var/lib/mongodb/application -o 'defaults,noatime' -x -u mongodb -i ", { "Ref": "IOPS" }, " -t io1 -k ", { "Ref": "CustomerMasterKey" }] ] },
                { "Fn::Join": [ "", ["/opt/features/ebs/add-encrypted.sh -s ", { "Ref": "EBSVolumeSize" }, " -d g -m /var/lib/mongodb/blockstore -o 'defaults,noatime' -x -u mongodb -i ", { "Ref": "IOPS" }, " -t io1 -k ", { "Ref": "CustomerMasterKey" }] ] },
                { "Fn::Join": [ "", ["/opt/features/ebs/add-encrypted.sh -s ", { "Ref": "EBSVolumeSize" }, " -d h -m /var/lib/mongodb/backup -o 'defaults,noatime' -x -u mongodb-mms -i ", { "Ref": "IOPS" }, " -t io1 -k ", { "Ref": "CustomerMasterKey" }] ] },
                "/opt/features/mongo-opsmanager/server-configure.sh"
              ]
            ]
          }
        }
      }
    }
  }
}
