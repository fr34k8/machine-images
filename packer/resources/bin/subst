#!/bin/bash
# This script attempts to substitute values in templated files
# Usage: subst -f map-file [key1=value1 ...] template
set -e

declare -A SUBS
SUBST_FILE=""
SED_BASE_ARGS=""

function HELP {
>&2 cat << EOF

  Usage: ${0} [-f map-file] [key1=value1 ...] template

  This script acquires key-value pairs from various sources and then uses
  them to make substitutions in the specified template file. The result is
  output to stdout.

    -i            Modify the template inplace, when used you may use multiple
                  template files simultaneously

    -f map-file   Reads further substitution values from the specified map-file
                  (in key=value pairs).

    -p stack      Reads the CFN stack parameters (these will appear with a
                  prefix of 'param.').

    -t            Reads the instance tags (these will appear with a prefix of
                  'tag.'). If a tag exists called aws:cloudformation:stack-id
                  and the instance has the right permissions then the stack
                  parameters will be read as if the -p parameter had been passed
                  with the value of the stack-id tag.

    -h            Displays this help message. No further functions are
                  performed.

    template      The template to apply substitutions to.

EOF
exit 1
}

function read_subst_file {
  if [ -f ${1} ]; then
    >&2 echo "Reading ${1}"
    while read -r line || [[ -n $line ]]; do
      key=${line%%=*}
      value=${line#*=}
      SUBS[$key]=$value
      >&2 echo " >> $key = ${SUBS[$key]}"
    done < ${1}
  else
    >&2 echo "File not found: ${1}"
    exit 1
  fi
}

function read_tags {
  INSTANCE=$(ec2metadata --instance-id)
  >&2 echo "Reading AWS tags for ${INSTANCE}"
  ret=0
  TAGS=`aws ec2 describe-tags --filters "Name=resource-id,Values=${INSTANCE}"` || ret=$?
  if [ ${ret} == 0 ]; then
    for tag in $(echo "${TAGS}" | jq -r '.Tags[] | [.Key, .Value] | join("=")'); do
      key="tag.${tag%%=*}"
      value=${tag#*=}
      SUBS[$key]=$value
      >&2 echo " >> $key = ${SUBS[$key]}"
    done

    STACK_ID=${SUBS["tag.aws:cloudformation:stack-id"]}

    if [ -n "${STACK_ID}" ]; then
      read_parameters ${STACK_ID}
    fi
  fi
}

function read_parameters {
  STACK=${1}
  >&2 echo "Reading CFN stack parameters for stack '${STACK}'"
  ret=0
  DESC=`aws cloudformation describe-stacks --stack-name ${STACK}` || ret=$?
  if [ ${ret} == 0 ]; then
    for param in $(echo "${DESC}" | jq -r '.Stacks[0].Parameters[] | [.ParameterKey, .ParameterValue] | join("=")'); do
      key="param.${param%%=*}"
      value=${param#*=}
      SUBS[$key]=$value
      >&2 echo " >> $key = ${SUBS[$key]}"
    done
  fi
}

# Process options
while getopts itp:f:h FLAG; do
  case $FLAG in
    i)
      SED_BASE_ARGS="-i"
    f)
      read_subst_file $OPTARG
      ;;
    t)
      read_tags
      ;;
    p)
      read_parameters $OPTARG
      ;;
    h)  #show help
      HELP
      ;;
  esac
done
shift $((OPTIND-1))

# Read command line KV pairs
while (( $# )); do
  if (echo $1 | grep '=' > /dev/null); then
    key=${1%%=*}
    value=${1#*=}
    SUBS[$key]=$value
    >&2 echo " >> $key = ${SUBS[$key]}"
    shift
  else
    break
  fi
done

>&2 echo "done with params"

sed_args=${SED_BASE_ARGS}
# build up the sed command line
for K in "${!SUBS[@]}"; do
  >&2 echo $K
  sed_args="${sed_args} -e 's|@${K}@|${SUBS[$K]}|g'"
done

if (echo ${SED_BASE_ARGS} | grep '-i' > /dev/null); then
  while (( $# )); do
    template_file=$1
    eval sed ${sed_args} ${template_file}
    shift
  done
else
  template_file=$1
  eval sed ${sed_args} ${template_file}
fi
